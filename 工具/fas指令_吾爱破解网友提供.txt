;;;------------------------- 八位代码说明 -------------------------;;;
;;;                                                                ;;;
;;;任何一个八位代码都有两种用途：表示一个整数或一条指令。          ;;;
;;;指令说明列表：                                                  ;;;
;;;                                                                ;;;
;;;  0 指令，是分隔符号，用在两条数据之间，同一类型的两条数据之间，;;;
;;;        如果类型指令不确定字节个数，那么就用 0分隔开。          ;;;
;;; [00 数据区]                                                    ;;;
;;;                                                                ;;;
;;;0 0 指令，表示它后面一个字节的代码肯定是指令。当然，除非它      ;;;
;;;        表示一个整数或字符""，这种例外的只有51和85指令。        ;;;
;;; [00 00 数据区]                                                 ;;;
;;;                                                                ;;;
;;;  1 指令，这指令后面不带任何字节，表示 nil。                    ;;;
;;; [01 数据区、表达式区]                                          ;;;
;;;                                                                ;;;
;;;    指令1 和指令10的另外一种用法：指令10表示前一条表达式不用返  ;;;
;;;    回值，而需要表达式返回值，而值为空时，就需要用1 指令来表示  ;;;
;;;    另外，1 指令用在103 指令前面时，表示这两条指令之间的表达式  ;;;
;;;    都是条件，相当于progn ，而没有1 指令，则相当于and。         ;;;
;;;                                                                ;;;
;;;  2 指令，这指令后面不带任何字节，表示 T。                      ;;;
;;; [02 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;  3 指令，有两种含义，在表达式前面，后面带两个字节，这两个      ;;;
;;;        字节表示一个变量或参数；还有一种含义是53指令的最后      ;;;
;;;        一个字节，表示53指令结束。                              ;;;
;;; [03 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;  6 指令，后面带两个字节，表示一个变量，有设置或定义的意思。    ;;;
;;;        53 n0 n1 n2 3 6 n3 n4 表示设置一个变量的值；            ;;;
;;;        9 n1 n2 6 n3 n4 9 n3 n4 表示声明一个自定义函数。        ;;;
;;; [06 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;  这里为什么出现n1 n2和n3 n4不相等，因为在数据区，一个自定      ;;;
;;;  义函数出现在两个地方，一个地方在数据区的开始部分，表示整      ;;;
;;;  体调用情况，另一个地方在数据区的最后面，表示自定义函数的      ;;;
;;;  列表，两个部分的编号是各自独立的。                            ;;;
;;;                                                                ;;;
;;;  另外，当6 指令设置一个变量的时候，它有结束一条表达式的意思，  ;;;
;;;  相当于附加了一个10指令，因此，如果表达式还没结束，那么6 指令  ;;;
;;;  前面要添加一个11指令，来表示表达式还没结束。                  ;;;
;;;                                                                ;;;
;;;  9 指令，含义和 3差不多，后面带的两个字节表示字符串或浮点      ;;;
;;;        数，还有另外一个含义就是上面提到的和 6指令组合使用，    ;;;
;;;        来声明一个自定义函数，和这种情况相似的，和92指令组      ;;;
;;;        合使用，来声明参数或变量的。                            ;;;
;;; [09 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;    9 n1 n2 92 0 0声明n1 n2 为第一个参数                        ;;;
;;;    9 n3 n4 92 1 0声明n3 n4 为第二个参数 ...等等                ;;;
;;;    9 n1 n2 81 1 n3 n4 1 0 10 声明n1 n2 为最后一个变量，10      ;;;
;;;  表示声明结束，后面就是表达式部分了，参数声明和变量声明之      ;;;
;;;  间用24指令带两个字节分隔，n3 n4 编号指的是 fas内部函数。      ;;;
;;;  变量的规则：                                                  ;;;
;;;      自定义函数的变量，在数据区，所有的变量都放在一起，用      ;;;
;;;      一个编号来声明，数据区里用57指令来说明有几个变量这个      ;;;
;;;      编号在表达式里不会被调用，要调用变量时，每一个变量都      ;;;
;;;      会重新定义一个编号。                                      ;;;
;;;                                                                ;;;
;;; 10 指令，段落分隔符号，除了上面提到的声明部分和表达式部分      ;;;
;;;        两个段落之间的分隔，以及两个自定义函数声明之间的分      ;;;
;;;        隔外，用在表达式之间时，表示上一条表达式结束，如果      ;;;
;;;        上一条表达式是6 指令结尾的，就不用10指令了，还用在      ;;;
;;;        87指令后面，表示87指令对应的是104 指令。                ;;;
;;; [0A 数据区、表达式区]                                          ;;;
;;;                                                                ;;;
;;; 11 指令，经常用在 6指令前面，不带任何字节，给 6指令作修饰      ;;;
;;;        用，表示变量被设置后，还有其他用途，比如作为条件表      ;;;
;;;        达式，或者是函数的返回值。                              ;;;
;;; [0B 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 20 指令，表示一个段的表达式的开始，后面带 4个字节，第一个字节  ;;;
;;;        表示这个段里声明的参数的总数，第二个和第三个字节都表示  ;;;
;;;        自定义函数声明的参数个数，第四个字节总是0 。            ;;;
;;; [14 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 22 指令，表示一个段的表达式的结束，它对应一个20指令。          ;;;
;;; [16 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 24 指令，带两个字节，两个字节表示的整数等于参数的个数的两      ;;;
;;;    倍加一。                                                    ;;;
;;; [18 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 25 指令，带两个字节，表示要清除的参数和变量的个数。            ;;;
;;;    这个指令的主要作用是函数运行结束后，需要把声明过的参数      ;;;
;;;    和变量设置成 nil，也就是说两个字节的整数表示参数和变量      ;;;
;;;    的个数。                                                    ;;;
;;; [19 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 28 指令，前面的是数据区，后面的是总体表达式区。                ;;;
;;; [1C 数据区]                                                    ;;;
;;;                                                                ;;;
;;; 32 指令，用法不明：53 0 167 3 3 32 10 3 166 3 10               ;;;
;;; [20 .fas、表达式区]                                            ;;;
;;;                                                                ;;;
;;; 35 指令，判断前面的表达式是否为空，相当于null not。仅使用      ;;;
;;;    于优化连接编译里。                                          ;;;
;;; [23 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 36 指令， fas字节段符号，每一段字节总有一个36作为开始，及结束。;;;
;;;    用在表达式里，同 atom                                       ;;;
;;; [24 .fas]                                                      ;;;
;;;                                                                ;;;
;;; 40 指令，提取92指令所指的参数中的第一个元素，同 car。          ;;;
;;; [28 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 41 指令，去掉92指令所指的参数中的第一个元素，同 cdr。          ;;;
;;; [29 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 42 指令，和57差不多，将前两项连成一个表，同cons。              ;;;
;;; [2A 数据区、表达式区]                                          ;;;
;;;                                                                ;;;
;;; 50 指令，带一个字节，表示这个字节是一个整数。最大值 127。      ;;;
;;; [32 数据区、表达式区]                                          ;;;
;;;                                                                ;;;
;;; 51 指令，带四个字节，表示这四个字节是一个整数。                ;;;
;;; [33 数据区、表达式区]                                          ;;;
;;;                                                                ;;;
;;;    多个字节表示的整数，低位在前，高位在后，比如：              ;;;
;;;    2 1 0 0 = (+ 2 (* 1 256))                                   ;;;
;;;    3 4 5 0 = (+ 3 (* 4 256) (* 5 256 256))                     ;;;
;;;                                                                ;;;
;;; 52 指令，表示前一条带括号表达式是作为函数被调用的，52 1 7中的  ;;;
;;;    1 表示无名函数参数的个数，7 表示一个结束符号。              ;;;
;;; [34 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;    9 5 0 9 4 0 9 3 0 53 3 2 0 3                                ;;;
;;; (MAPCAR '(LIST (QUOTE (X Y)) (QUOTE (+ X Y))) '(4 5) '(6 7))   ;;;
;;;    9 1 0        ; '((X) (APPLY (QUOTE +) X))                   ;;;
;;;    52 1 7                                                      ;;;
;;; ('((x) (apply '+ x))                                           ;;;
;;;   (mapcar '(list '(x y) '(+ x y)) '(4 5) '(6 7)))              ;;;
;;;                                                                ;;;
;;; 53 指令，带四个字节，表示调用一个函数，形式如下：              ;;;
;;;    [3/9 ...]... 53 n0 n1 n2 3其中n0表示前面参数的个数，        ;;;
;;;    n1 n2 表示被调用的函数， 3表示函数调用结束。                ;;;
;;;    在vl-acad-defun调用中，如果是fas内部函数，1表示结束。       ;;;
;;; [35 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 57 指令，用在数据区带两个字节，表示一个整数，这个整数表示      ;;;
;;;    前面的几个数据组合成一个表，同list。                        ;;;
;;; [39 数据区]                                                    ;;;
;;;                                                                ;;;
;;; 58 指令，表示自定义函数声明结束。                              ;;;
;;; [3A 数据区]                                                    ;;;
;;;                                                                ;;;
;;; 59 指令，表示它后面带的是浮点数。在数据区，不存储整数，但      ;;;
;;;        存储浮点数，还存储字符串，及 T。                        ;;;
;;; [3B 数据区]                                                    ;;;
;;;                                                                ;;;
;;; 67 指令，章节指令或区域指令，带四个字节，每两个字节表示一      ;;;
;;;        个整数。表示上一个区域和下一个区域，数据的个数。        ;;;
;;; [43 数据区]                                                    ;;;
;;;                                                                ;;;
;;; DataArea         ; 数据区                                      ;;;
;;; 0 0 1                                                          ;;;
;;; 1 67 0 0 2 0 10                                                ;;;
;;; 1 92 0           ; 声明区                                      ;;;
;;; 0 67 0 0 1 0 10                                                ;;;
;;; 1 67 2 0 0 0 28                                                ;;;
;;; 20 ExprArea 22   ; 总体表达式区                                ;;;
;;;                                                                ;;;
;;; 75 指令，判断前两个表达式是否相等。                            ;;;
;;; [4B 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 80 指令，把前面92指令所指的数递减 1。                          ;;;
;;;    出现在repeat表达式中                                        ;;;
;;; [50 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 81 指令，和53指令相似，但它的是 fas内部函数 ads-cmd            ;;;
;;;    9 n1 n2 81 1 n3 n4 1 0和53不同的是，81指令以1 0为结尾，     ;;;
;;;    n1 n2 被调用的ACAD命令名，等同与command函数                 ;;;
;;;    n3 n4 指 fas内部函数 ads-cmd或vl-acad-defun等               ;;;
;;;    1     表示被调用的命令名个数，象这样的参数一般都是1         ;;;
;;; [51 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 85 指令，表示它后面带的是字符串。                              ;;;
;;;    0 0 85 n1 n2 n3 n4 str1 n5 n6 str2 ...                      ;;;
;;;    n1 n2 表示字符串个数，n3 n4 表示下一条字符串长度。          ;;;
;;;特别要注意的是空字符串的表示：0 0 85 1 0 0 0                    ;;;
;;;它的原则是可以省略一个 0。                                      ;;;
;;; [55 数据区]                                                    ;;;
;;;                                                                ;;;
;;; 86 指令，表示它后面带的是 fas内部函数。                        ;;;
;;; [56 数据区]                                                    ;;;
;;;                                                                ;;;
;;; 87 指令，跳转指令的跳转符号。                                  ;;;
;;; [57 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;    87 n1 n2 n3 n4 [Expr] ; n1 n2 n3 n4 四个字节表示后面        ;;;
;;;                          ; 表达式的长度                        ;;;
;;;特别要注意的是，如果n1 n2 n3 n4 表示一个负数，那它后面不带      ;;;
;;;表达式，而是跳转到前面的跳转指令，相当于循环while 等。          ;;;
;;;                                                                ;;;
;;; 91 指令，带一个变量名，函数名，或参数名。                      ;;;
;;; [5B 数据区]                                                    ;;;
;;;                                                                ;;;
;;; 92 指令，声明指令，声明参数、自定义函数等等，带两个字节，      ;;;
;;;    三个用途：                                                  ;;;
;;;     1. 在数据区，声明自定义函数名，形式如下：                  ;;;
;;;        92 0 0 [50 n1/51 n1 n2 n3 n4] 91 fname 0 0 58           ;;;
;;;     2. 在函数定义开头，声明函数的参数                          ;;;
;;;     3. 在循环开头，由93指令声明一个变量，92指令来调用。        ;;;
;;; [5C 数据区、表达式区]                                          ;;;
;;;                                                                ;;;
;;; 93 指令，在循环语句中使用，带两个字节，含义是把上一条表达      ;;;
;;;    式的值赋予92指令，它带的两个字节也一并传递给92指令。        ;;;
;;; [5D 表达式区]                                                  ;;;
;;;                                                                ;;;
;;; 95 指令，和81，53指令相似，带五个字节，第一个字节指参数的      ;;;
;;;    个数，后面四个字节指自定义函数的起始指针。                  ;;;
;;; [5F 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;103 指令，跳转指令，相当于 if                                   ;;;
;;; [67 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;  TestExpr 103 n1 n2 n3 n4 ThenExpr 87 m1 m2 m3 m4 [ElseExpr]   ;;;
;;;    TestExpr条件表达式                                          ;;;
;;;    n1 n2 n3 n4 要跳转的字节数，也就是从 103指令到87指令之      ;;;
;;;                间的字节个数。                                  ;;;
;;;  这个段落的意思是，如果TestExpr返回 T就执行ThenExpr，否则      ;;;
;;;  跳转到87指令执行ElseExpr。                                    ;;;
;;;                                                                ;;;
;;;104 指令，跳转指令，相当于 or                                   ;;;
;;; [68 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;  TestExpr 104 n1 n2 n3 n4 ... 87 m1 m2 m3 m4 [ThenExpr]        ;;;
;;;    如果条件表达式返回 T，就跳转到跳转符号87指令。              ;;;
;;;    n1 n2 n3 n4 表示跳转的字节数                                ;;;
;;;                                                                ;;;
;;;106 指令，跳转指令，相当于 and                                  ;;;
;;; [6A 表达式区]                                                  ;;;
;;;                                                                ;;;
;;;  TestExpr1 106 n1 n2 n3 n4 TestExpr2 106 n5 n6 n7 n8 ...       ;;;
;;;    如果上一条条件表达式返回 T，那么就执行下一条条件表达式，    ;;;
;;;    否则就跳转到指定字节个数后面的表达式。                      ;;;
;;;注意，第一个四字节的整数表示从第一个 106开始到后面所有条件      ;;;
;;;表达式的总字节数，那么最后一个 106指令带的四字节整数总是 0。    ;;;
;;;                                                                ;;;
;;;----------------------------------------------------------------;;;