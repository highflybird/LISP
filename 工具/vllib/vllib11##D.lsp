;;;==========SubFunction==========
;;;def sys-str-top 1
(00000001 20 4 2 2 0)
(00000006 5 0		UnVar0)
(00000008 8 2		UnVar2)
(0000000A 100 3		UNVar3)
(0000000C 9 83 0		'sys-str-top)
(0000000F 5 2		UnVar2)
(00000011 81 2 82 0 1 0		compute-applicable-methods)
(00000017 8 3		UnVar3)
(00000019 5 3		UnVar3)
(0000001B 37 2		consp)
(0000001D 13 12 0		nil->JMP 0000002C)
(00000020 5 3		UnVar3)
(00000022 41		cdr)
(00000023 5 2		UnVar2)
(00000025 5 1		UnVar1)
(00000027 5 3		UnVar3)
(00000029 40		car)
(0000002A 46 3		invoke+ret)
(0000002C 9 83 0		'sys-str-top)
(0000002F 5 2		UnVar2)
(00000031 81 2 81 0 1 0		no-applicable-method)
(00000037 22		ret)
;;;def _load_lpp-istm 56
(00000038 20 3 1 2 0)
(0000003D 100 2		UNVar2)
(0000003F 9 80 0		'*load-stream-hook*)
(00000042 1		nil)
(00000043 24 2 0)
(00000046 5 0		UnVar0)
(00000048 5 1		UnVar1)
(0000004A 81 2 79 0 1 0		load-stream)
(00000050 25 1 0)
(00000053 22		ret)
;;;def _load-lex-istm 84
(00000054 20 2 1 2 0)
(00000059 9 80 0		'*load-stream-hook*)
(0000005C 9 78 0		'lx-load-stream)
(0000005F 24 2 0)
(00000062 5 0		UnVar0)
(00000064 5 1		UnVar1)
(00000066 81 2 79 0 1 0		load-stream)
(0000006C 25 1 0)
(0000006F 22		ret)
;;;def nil 112
(00000070 20 2 2 2 0)
(00000075 5 0		UnVar0)
(00000077 53 1 77 0 1 32		object-id)
(0000007D 5 1		UnVar1)
(0000007F 38		=)
(00000080 22		ret)
;;;def rep-cntx-p 129
(00000081 20 1 1 1 0)
(00000086 5 0		UnVar0)
(00000088 9 76 0		'rep-cntx)
(0000008B 47 2 75 0 32 32		typep)
;;;def rep-cntx.new-instance 145
(00000091 20 13 1 1 1)
(00000096 5 1		UnVar1)
(00000098 8 2		UnVar2)
(0000009A 5 2		UnVar2)
(0000009C 9 74 0		':NAME)
(0000009F 9 73 0		':LPP)
(000000A2 81 3 72 0 1 0		getf)
(000000A8 8 3		UnVar3)
(000000AA 5 2		UnVar2)
(000000AC 9 71 0		':READ)
(000000AF 5 3		UnVar3)
(000000B1 8 5		UnVar5)
(000000B3 5 5		UnVar5)
(000000B5 9 70 0		'(:LPP :LEX))
(000000B8 81 2 69 0 1 0		memq)
(000000BE 13 6 0		nil->JMP 000000C7)
(000000C1 3 68 0		lpp!read)
(000000C4 15 16 0		JMP 000000D7)
(000000C7 5 5		UnVar5)
(000000C9 9 67 0		':AUTOLISP)
(000000CC 38		=)
(000000CD 13 6 0		nil->JMP 000000D6)
(000000D0 3 66 0		al!read)
(000000D3 15 1 0		JMP 000000D7)
(000000D6 1		nil)
(000000D7 81 3 72 0 1 0		getf)
(000000DD 8 4		UnVar4)
(000000DF 5 2		UnVar2)
(000000E1 9 65 0		':READER-PROMPT)
(000000E4 5 3		UnVar3)
(000000E6 8 6		UnVar6)
(000000E8 5 6		UnVar6)
(000000EA 9 70 0		'(:LPP :LEX))
(000000ED 81 2 69 0 1 0		memq)
(000000F3 13 6 0		nil->JMP 000000FC)
(000000F6 3 64 0		lpp!reader-prompt)
(000000F9 15 16 0		JMP 0000010C)
(000000FC 5 6		UnVar6)
(000000FE 9 67 0		':AUTOLISP)
(00000101 38		=)
(00000102 13 6 0		nil->JMP 0000010B)
(00000105 3 63 0		al!reader-prompt)
(00000108 15 1 0		JMP 0000010C)
(0000010B 1		nil)
(0000010C 81 3 72 0 1 0		getf)
(00000112 8 5		UnVar5)
(00000114 5 2		UnVar2)
(00000116 9 62 0		':EVAL)
(00000119 5 3		UnVar3)
(0000011B 8 7		UnVar7)
(0000011D 5 7		UnVar7)
(0000011F 9 73 0		':LPP)
(00000122 38		=)
(00000123 13 6 0		nil->JMP 0000012C)
(00000126 3 61 0		lpp!eval)
(00000129 15 31 0		JMP 0000014B)
(0000012C 5 7		UnVar7)
(0000012E 9 60 0		':LEX)
(00000131 38		=)
(00000132 13 6 0		nil->JMP 0000013B)
(00000135 3 59 0		lex!eval)
(00000138 15 16 0		JMP 0000014B)
(0000013B 5 7		UnVar7)
(0000013D 9 67 0		':AUTOLISP)
(00000140 38		=)
(00000141 13 6 0		nil->JMP 0000014A)
(00000144 3 58 0		al!eval)
(00000147 15 1 0		JMP 0000014B)
(0000014A 1		nil)
(0000014B 81 3 72 0 1 0		getf)
(00000151 8 6		UnVar6)
(00000153 5 2		UnVar2)
(00000155 9 57 0		':LOAD-STREAM)
(00000158 5 3		UnVar3)
(0000015A 8 8		UnVar8)
(0000015C 5 8		UnVar8)
(0000015E 9 73 0		':LPP)
(00000161 38		=)
(00000162 13 6 0		nil->JMP 0000016B)
(00000165 3 56 0		lpp!load-stream)
(00000168 15 31 0		JMP 0000018A)
(0000016B 5 8		UnVar8)
(0000016D 9 60 0		':LEX)
(00000170 38		=)
(00000171 13 6 0		nil->JMP 0000017A)
(00000174 3 55 0		lex!load-stream)
(00000177 15 16 0		JMP 0000018A)
(0000017A 5 8		UnVar8)
(0000017C 9 67 0		':AUTOLISP)
(0000017F 38		=)
(00000180 13 6 0		nil->JMP 00000189)
(00000183 3 54 0		al!load-stream)
(00000186 15 1 0		JMP 0000018A)
(00000189 1		nil)
(0000018A 81 3 72 0 1 0		getf)
(00000190 8 7		UnVar7)
(00000192 5 2		UnVar2)
(00000194 9 53 0		':PACKAGE)
(00000197 5 3		UnVar3)
(00000199 8 9		UnVar9)
(0000019B 5 9		UnVar9)
(0000019D 9 70 0		'(:LPP :LEX))
(000001A0 81 2 69 0 1 0		memq)
(000001A6 13 6 0		nil->JMP 000001AF)
(000001A9 3 52 0		lpp!package)
(000001AC 15 16 0		JMP 000001BF)
(000001AF 5 9		UnVar9)
(000001B1 9 67 0		':AUTOLISP)
(000001B4 38		=)
(000001B5 13 6 0		nil->JMP 000001BE)
(000001B8 3 51 0		al!package)
(000001BB 15 1 0		JMP 000001BF)
(000001BE 1		nil)
(000001BF 81 3 72 0 1 0		getf)
(000001C5 8 8		UnVar8)
(000001C7 5 0		UnVar0)
(000001C9 8 9		UnVar9)
(000001CB 5 3		UnVar3)
(000001CD 81 1 50 0 1 0		keywordp)
(000001D3 13 3 0		nil->JMP 000001D9)
(000001D6 15 13 0		JMP 000001E6)
(000001D9 9 49 0		":")
(000001DC 5 3		UnVar3)
(000001DE 81 2 48 0 1 0		strcat)
(000001E4 8 3		UnVar3)
(000001E6 5 3		UnVar3)
(000001E8 81 1 47 0 1 0		symbol-name)
(000001EE 9 73 0		':LPP)
(000001F1 81 2 46 0 1 0		intern)
(000001F7 8 3		UnVar3)
(000001F9 5 3		UnVar3)
(000001FB 5 8		UnVar8)
(000001FD 81 2 46 0 1 0		intern)
(00000203 10)
(00000204 5 3		UnVar3)
(00000206 5 9		UnVar9)
(00000208 45 0		IDFun0)
(0000020A 10)
(0000020B 5 4		UnVar4)
(0000020D 5 9		UnVar9)
(0000020F 45 1		IDFun1)
(00000211 10)
(00000212 5 5		UnVar5)
(00000214 5 9		UnVar9)
(00000216 45 2		IDFun2)
(00000218 10)
(00000219 5 6		UnVar6)
(0000021B 5 9		UnVar9)
(0000021D 45 3		IDFun3)
(0000021F 10)
(00000220 5 7		UnVar7)
(00000222 5 9		UnVar9)
(00000224 45 4		IDFun4)
(00000226 10)
(00000227 5 8		UnVar8)
(00000229 5 9		UnVar9)
(0000022B 45 5		IDFun5)
(0000022D 10)
(0000022E 1		nil)
(0000022F 5 9		UnVar9)
(00000231 45 6		IDFun6)
(00000233 10)
(00000234 5 0		UnVar0)
(00000236 53 1 77 0 1 32		object-id)
(0000023C 8 3		UnVar3)
(0000023E 3 45 0		*rep-cntx-table*)
(00000241 8 10		UnVar10)
(00000243 5 3		UnVar3)
(00000245 57 1 0		list)
(00000248 8 12		UnVar12)
(0000024A 5 12		UnVar12)
(0000024C 5 12		UnVar12)
(0000024E 81 2 44 0 1 0		rplacd)
(00000254 8 11		UnVar11)
(00000256 100 12		UNVar12)
(00000258 15 10 0		JMP 00000265)
(0000025B 5 10		UnVar10)
(0000025D 41		cdr)
(0000025E 8 10		UnVar10)
(00000260 5 11		UnVar11)
(00000262 41		cdr)
(00000263 8 11		UnVar11)
(00000265 5 10		UnVar10)
(00000267 61 21 0		nil->JMP 0000027F)
(0000026A 5 11		UnVar11)
(0000026C 61 16 0		nil->JMP 0000027F)
(0000026F 5 10		UnVar10)
(00000271 40		car)
(00000272 5 11		UnVar11)
(00000274 40		car)
(00000275 95 2 112 0 0 0		func 00000070)
(0000027B 11)
(0000027C 8 12		UnVar12)
(0000027E 35		not)
(0000027F 60 217 255		T->JMP 0000025B)
(00000282 5 12		UnVar12)
(00000284 13 12 0		nil->JMP 00000293)
(00000287 9 43 0		"rep-cntx redefinition: ~s")
(0000028A 5 3		UnVar3)
(0000028C 53 2 42 0 1 32		warn)
(00000292 10)
(00000293 5 0		UnVar0)
(00000295 3 45 0		*rep-cntx-table*)
(00000298 42		cons)
(00000299 6 45 0		*rep-cntx-table*)
(0000029C 5 0		UnVar0)
(0000029E 22		ret)
;;;def rep-cntx 671
(0000029F 20 1 0 0 1)
(000002A4 9 91 0		'(145 rep-cntx.new-instance))
(000002A7 9 76 0		'rep-cntx)
(000002AA 53 1 41 0 1 32		allocate-instance)
(000002B0 5 0		UnVar0)
(000002B2 42		cons)
(000002B3 84		apply+ret)
;;;def rep-cntx-by-id 692
(000002B4 21 1 1 1 0)
(000002B9 15 26 0		JMP 000002D6)
(000002BC 20 3 1 1 0)
(000002C1 5 0		UnVar0)
(000002C3 8 1		UnVar1)
(000002C5 4 1 0		UpVar1-0)
(000002C8 8 2		UnVar2)
(000002CA 5 1		UnVar1)
(000002CC 53 1 77 0 1 32		object-id)
(000002D2 5 2		UnVar2)
(000002D4 38		=)
(000002D5 22		ret)
(000002D6 12 90 0		'(700 nil))
(000002D9 3 45 0		*rep-cntx-table*)
(000002DC 81 2 40 0 1 0		member-if)
(000002E2 40		car)
(000002E3 22		ret)
;;;def rep-cntx.object-id 740
(000002E4 20 1 1 1 0)
(000002E9 5 0		UnVar0)
(000002EB 44 0		IDFun0)
(000002ED 22		ret)
;;;def rep-cntx.object-name 750
(000002EE 20 1 1 1 0)
(000002F3 5 0		UnVar0)
(000002F5 44 0		IDFun0)
(000002F7 81 1 39 0 1 0		string)
(000002FD 22		ret)
;;;def rep-cntx.print-object 766
(000002FE 20 3 2 2 0)
(00000303 5 0		UnVar0)
(00000305 8 2		UnVar2)
(00000307 5 1		UnVar1)
(00000309 9 38 0		"#<~@X ~S>")
(0000030C 5 0		UnVar0)
(0000030E 5 2		UnVar2)
(00000310 44 0		IDFun0)
(00000312 47 4 37 0 32 32		prinf)
;;;def rep-cntx.redirect 792
(00000318 20 3 2 2 0)
(0000031D 5 0		UnVar0)
(0000031F 8 2		UnVar2)
(00000321 5 2		UnVar2)
(00000323 44 6		IDFun6)
(00000325 13 11 0		nil->JMP 00000333)
(00000328 5 2		UnVar2)
(0000032A 44 6		IDFun6)
(0000032C 81 1 36 0 1 0		force-output)
(00000332 10)
(00000333 5 1		UnVar1)
(00000335 81 1 35 0 1 0		terminalp)
(0000033B 13 19 0		nil->JMP 00000351)
(0000033E 5 1		UnVar1)
(00000340 81 0 34 0 1 0		make-null-stream)
(00000346 81 2 33 0 1 0		_terminal-iostream)
(0000034C 5 2		UnVar2)
(0000034E 45 6		IDFun6)
(00000350 22		ret)
(00000351 5 1		UnVar1)
(00000353 81 1 32 0 1 0		output-streamp)
(00000359 9 31 0		"bad argument type: output-streamp:")
(0000035C 5 1		UnVar1)
(0000035E 53 3 30 0 1 32		assert)
(00000364 10)
(00000365 5 1		UnVar1)
(00000367 5 2		UnVar2)
(00000369 45 6		IDFun6)
(0000036B 22		ret)
;;;def rep-cntx.find-symbol 876
(0000036C 20 3 2 2 0)
(00000371 5 0		UnVar0)
(00000373 8 2		UnVar2)
(00000375 5 1		UnVar1)
(00000377 5 2		UnVar2)
(00000379 44 5		IDFun5)
(0000037B 81 2 29 0 1 0		find-symbol)
(00000381 22		ret)
;;;def rep-cntx.intern 898
(00000382 20 3 2 2 0)
(00000387 5 0		UnVar0)
(00000389 8 2		UnVar2)
(0000038B 5 1		UnVar1)
(0000038D 5 2		UnVar2)
(0000038F 44 5		IDFun5)
(00000391 81 2 46 0 1 0		intern)
(00000397 22		ret)
;;;def rep-cntx.apropos 920
(00000398 20 4 2 3 0)
(0000039D 5 0		UnVar0)
(0000039F 8 3		UnVar3)
(000003A1 5 1		UnVar1)
(000003A3 5 3		UnVar3)
(000003A5 44 5		IDFun5)
(000003A7 5 2		UnVar2)
(000003A9 81 3 28 0 1 0		apropos)
(000003AF 22		ret)
;;;def rep-cntx.p-apply 944
(000003B0 21 6 4 4 0)
(000003B5 5 0		UnVar0)
(000003B7 8 4		UnVar4)
(000003B9 9 27 0		'_%curr-rep-cntx%)
(000003BC 5 0		UnVar0)
(000003BE 9 26 0		'*standard-output*)
(000003C1 3 25 0		_%rep-cntx-preserve-stdo%)
(000003C4 13 6 0		nil->JMP 000003CD)
(000003C7 3 26 0		*standard-output*)
(000003CA 15 4 0		JMP 000003D1)
(000003CD 5 4		UnVar4)
(000003CF 44 6		IDFun6)
(000003D1 14 3 0		T->JMP 000003D7)
(000003D4 3 26 0		*standard-output*)
(000003D7 9 24 0		'*error-output*)
(000003DA 5 4		UnVar4)
(000003DC 44 6		IDFun6)
(000003DE 14 3 0		T->JMP 000003E4)
(000003E1 3 24 0		*error-output*)
(000003E4 9 23 0		'%al-print%)
(000003E7 5 4		UnVar4)
(000003E9 44 0		IDFun0)
(000003EB 9 67 0		':AUTOLISP)
(000003EE 38		=)
(000003EF 24 8 0)
(000003F2 5 4		UnVar4)
(000003F4 44 5		IDFun5)
(000003F6 81 1 22 0 1 0		_in-package)
(000003FC 8 5		UnVar5)
(000003FE 15 15 0		JMP 00000410)
(00000401 20 0 0 0 0)
(00000406 4 1 5		UpVar1-5)
(00000409 81 1 22 0 1 0		_in-package)
(0000040F 22		ret)
(00000410 12 89 0		'(1025 -unwind-cleanup-))
(00000413 15 21 0		JMP 0000042B)
(00000416 20 0 0 0 0)
(0000041B 4 1 1		UpVar1-1)
(0000041E 4 1 2		UpVar1-2)
(00000421 4 1 3		UpVar1-3)
(00000424 81 3 21 0 1 0		_protected-apply)
(0000042A 22		ret)
(0000042B 12 88 0		'(1046 -unwind-protect-))
(0000042E 1		nil)
(0000042F 81 3 20 0 1 0		_unwinded-apply)
(00000435 25 4 0)
(00000438 22		ret)
;;;def rep-cntx.p-funcall 1081
(00000439 20 4 3 3 1)
(0000043E 5 0		UnVar0)
(00000440 5 1		UnVar1)
(00000442 5 2		UnVar2)
(00000444 5 3		UnVar3)
(00000446 47 4 19 0 32 32		rep-cntx.p-apply)
;;;def rep-cntx.p-eval 1100
(0000044C 20 4 3 3 0)
(00000451 5 0		UnVar0)
(00000453 8 3		UnVar3)
(00000455 5 0		UnVar0)
(00000457 5 1		UnVar1)
(00000459 5 3		UnVar3)
(0000045B 44 3		IDFun3)
(0000045D 5 2		UnVar2)
(0000045F 57 1 0		list)
(00000462 47 4 19 0 32 32		rep-cntx.p-apply)
;;;def rep-cntx.apply 1128
(00000468 21 5 3 3 0)
(0000046D 5 0		UnVar0)
(0000046F 8 3		UnVar3)
(00000471 9 27 0		'_%curr-rep-cntx%)
(00000474 5 0		UnVar0)
(00000476 9 26 0		'*standard-output*)
(00000479 3 25 0		_%rep-cntx-preserve-stdo%)
(0000047C 13 6 0		nil->JMP 00000485)
(0000047F 3 26 0		*standard-output*)
(00000482 15 4 0		JMP 00000489)
(00000485 5 3		UnVar3)
(00000487 44 6		IDFun6)
(00000489 14 3 0		T->JMP 0000048F)
(0000048C 3 26 0		*standard-output*)
(0000048F 9 24 0		'*error-output*)
(00000492 5 3		UnVar3)
(00000494 44 6		IDFun6)
(00000496 14 3 0		T->JMP 0000049C)
(00000499 3 24 0		*error-output*)
(0000049C 9 23 0		'%al-print%)
(0000049F 5 3		UnVar3)
(000004A1 44 0		IDFun0)
(000004A3 9 67 0		':AUTOLISP)
(000004A6 38		=)
(000004A7 24 8 0)
(000004AA 5 3		UnVar3)
(000004AC 44 5		IDFun5)
(000004AE 81 1 22 0 1 0		_in-package)
(000004B4 8 4		UnVar4)
(000004B6 15 15 0		JMP 000004C8)
(000004B9 20 0 0 0 0)
(000004BE 4 1 4		UpVar1-4)
(000004C1 81 1 22 0 1 0		_in-package)
(000004C7 22		ret)
(000004C8 12 87 0		'(1209 -unwind-cleanup-))
(000004CB 15 12 0		JMP 000004DA)
(000004CE 20 0 0 0 0)
(000004D3 4 1 1		UpVar1-1)
(000004D6 4 1 2		UpVar1-2)
(000004D9 84		apply+ret)
(000004DA 12 86 0		'(1230 -unwind-protect-))
(000004DD 1		nil)
(000004DE 81 3 20 0 1 0		_unwinded-apply)
(000004E4 25 4 0)
(000004E7 22		ret)
;;;def rep-cntx.funcall 1256
(000004E8 20 3 2 2 1)
(000004ED 5 0		UnVar0)
(000004EF 5 1		UnVar1)
(000004F1 5 2		UnVar2)
(000004F3 47 3 18 0 32 32		rep-cntx.apply)
;;;def rep-cntx.eval 1273
(000004F9 20 3 2 2 0)
(000004FE 5 0		UnVar0)
(00000500 8 2		UnVar2)
(00000502 5 0		UnVar0)
(00000504 5 2		UnVar2)
(00000506 44 3		IDFun3)
(00000508 5 1		UnVar1)
(0000050A 57 1 0		list)
(0000050D 47 3 18 0 32 32		rep-cntx.apply)
;;;def rep-cntx.read 1299
(00000513 20 4 3 3 0)
(00000518 5 0		UnVar0)
(0000051A 8 3		UnVar3)
(0000051C 5 0		UnVar0)
(0000051E 5 3		UnVar3)
(00000520 44 1		IDFun1)
(00000522 5 1		UnVar1)
(00000524 1		nil)
(00000525 5 2		UnVar2)
(00000527 96 5 232 4 0 0		rep-cntx.funcall)
;;;def rep-cntx.p-read 1325
(0000052D 21 7 3 3 0)
(00000532 100 3		UNVar3)
(00000534 100 4		UNVar4)
(00000536 100 5		UNVar5)
(00000538 5 0		UnVar0)
(0000053A 8 6		UnVar6)
(0000053C 5 6		UnVar6)
(0000053E 44 2		IDFun2)
(00000540 8 3		UnVar3)
(00000542 5 6		UnVar6)
(00000544 44 5		IDFun5)
(00000546 8 4		UnVar4)
(00000548 3 17 0		_%sys-error-hook%)
(0000054B 8 5		UnVar5)
(0000054D 9 17 0		'_%sys-error-hook%)
(00000550 15 73 0		JMP 0000059C)
(00000553 20 2 1 1 0)
(00000558 100 1		UNVar1)
(0000055A 4 1 3		UpVar1-3)
(0000055D 52 0 1		)
(00000560 11)
(00000561 8 1		UnVar1)
(00000563 13 18 0		nil->JMP 00000578)
(00000566 4 1 2		UpVar1-2)
(00000569 37 12		boxp)
(0000056B 63		nil->ret)
(0000056C 4 1 2		UpVar1-2)
(0000056F 5 1		UnVar1)
(00000571 81 2 16 0 1 0		unbox<-)
(00000577 22		ret)
(00000578 4 1 2		UpVar1-2)
(0000057B 37 12		boxp)
(0000057D 13 11 0		nil->JMP 0000058B)
(00000580 4 1 2		UpVar1-2)
(00000583 1		nil)
(00000584 81 2 16 0 1 0		unbox<-)
(0000058A 10)
(0000058B 4 1 5		UpVar1-5)
(0000058E 63		nil->ret)
(0000058F 4 1 5		UpVar1-5)
(00000592 6 17 0		_%sys-error-hook%)
(00000595 5 0		UnVar0)
(00000597 4 1 5		UpVar1-5)
(0000059A 46 1		invoke+ret)
(0000059C 12 85 0		'(1363 nil))
(0000059F 24 2 0)
(000005A2 5 0		UnVar0)
(000005A4 5 2		UnVar2)
(000005A6 5 6		UnVar6)
(000005A8 44 1		IDFun1)
(000005AA 5 1		UnVar1)
(000005AC 1		nil)
(000005AD 5 2		UnVar2)
(000005AF 95 6 57 4 0 0		rep-cntx.p-funcall)
(000005B5 25 1 0)
(000005B8 22		ret)
;;;def rep-cntx.load-stream 1465
(000005B9 20 3 1 1 1)
(000005BE 5 0		UnVar0)
(000005C0 8 2		UnVar2)
(000005C2 5 0		UnVar0)
(000005C4 5 2		UnVar2)
(000005C6 44 4		IDFun4)
(000005C8 5 1		UnVar1)
(000005CA 47 3 18 0 32 32		rep-cntx.apply)
;;;def rep-cntx.p-load-stream 1488
(000005D0 20 3 1 1 1)
(000005D5 5 0		UnVar0)
(000005D7 8 2		UnVar2)
(000005D9 5 0		UnVar0)
(000005DB 5 2		UnVar2)
(000005DD 44 4		IDFun4)
(000005DF 5 1		UnVar1)
(000005E1 47 3 19 0 32 32		rep-cntx.p-apply)
;;;def nil 1576
(00000628 20 1 1 1 0)
(0000062D 5 0		UnVar0)
(0000062F 11)
(00000630 7 1 7		UpVar1-7)
(00000633 22		ret)
;;;==========Main==========
(00000000 20 0 0 0 0)
(00000005 1		nil)
(00000006 10)
(00000007 9 67 0		"3/5/18 10:08 PM")
(0000000A 26 66 0		*lcx-date*)
(0000000D 9 66 0		'*lcx-date*)
(00000010 10)
(00000011 9 65 0		'lcx)
(00000014 81 1 64 0 0 0		provide)
(0000001A 10)
(0000001B 9 63 0		'los)
(0000001E 81 1 62 0 0 0		require)
(00000024 10)
(00000025 9 61 0		'aleseval)
(00000028 81 1 62 0 0 0		require)
(0000002E 28		[ret])
(0000002F 20 0 0 0 0)
(00000034 1		nil)
(00000035 10)
(00000036 9 60 0		'rep-cntx)
(00000039 81 1 64 0 1 0		provide)
(0000003F 10)
(00000040 9 92 0		'sys-str-top)
(00000043 26 59 0		sys-str-top)
(00000046 9 59 0		'sys-str-top)
(00000049 10)
(0000004A 3 58 0		_%curr-rep-cntx%)
(0000004D 26 58 0		_%curr-rep-cntx%)
(00000050 9 58 0		'_%curr-rep-cntx%)
(00000053 10)
(00000054 1		nil)
(00000055 10)
(00000056 9 91 0		'_load_lpp-istm)
(00000059 26 57 0		_load_lpp-istm)
(0000005C 9 57 0		'_load_lpp-istm)
(0000005F 10)
(00000060 9 90 0		'_load-lex-istm)
(00000063 26 56 0		_load-lex-istm)
(00000066 9 56 0		'_load-lex-istm)
(00000069 10)
(0000006A 9 55 0		'read)
(0000006D 26 54 0		lpp!read)
(00000070 9 54 0		'lpp!read)
(00000073 10)
(00000074 9 53 0		'_reader-prompt)
(00000077 26 52 0		lpp!reader-prompt)
(0000007A 9 52 0		'lpp!reader-prompt)
(0000007D 10)
(0000007E 9 51 0		'eval)
(00000081 26 50 0		lpp!eval)
(00000084 9 50 0		'lpp!eval)
(00000087 10)
(00000088 9 91 0		'_load_lpp-istm)
(0000008B 26 49 0		lpp!load-stream)
(0000008E 9 49 0		'lpp!load-stream)
(00000091 10)
(00000092 9 48 0		':LPP)
(00000095 26 47 0		lpp!package)
(00000098 9 47 0		'lpp!package)
(0000009B 10)
(0000009C 9 46 0		'lxeval)
(0000009F 26 45 0		lex!eval)
(000000A2 9 45 0		'lex!eval)
(000000A5 10)
(000000A6 9 90 0		'_load-lex-istm)
(000000A9 26 44 0		lex!load-stream)
(000000AC 9 44 0		'lex!load-stream)
(000000AF 10)
(000000B0 9 43 0		'as:read)
(000000B3 26 42 0		al!read)
(000000B6 9 42 0		'al!read)
(000000B9 10)
(000000BA 9 41 0		'_as:reader-prompt)
(000000BD 26 40 0		al!reader-prompt)
(000000C0 9 40 0		'al!reader-prompt)
(000000C3 10)
(000000C4 9 39 0		'aleval)
(000000C7 26 38 0		al!eval)
(000000CA 9 38 0		'al!eval)
(000000CD 10)
(000000CE 9 37 0		'al-load-stream)
(000000D1 26 36 0		al!load-stream)
(000000D4 9 36 0		'al!load-stream)
(000000D7 10)
(000000D8 9 35 0		':AUTOLISP)
(000000DB 26 34 0		al!package)
(000000DE 9 34 0		'al!package)
(000000E1 10)
(000000E2 1		nil)
(000000E3 10)
(000000E4 1		nil)
(000000E5 10)
(000000E6 9 60 0		'rep-cntx)
(000000E9 9 33 0		'(instance))
(000000EC 3 32 0		*deftype-hook*)
(000000EF 52 2 1		)
(000000F2 10)
(000000F3 9 60 0		'rep-cntx)
(000000F6 9 31 0		'(standard-class rep-cntx :BASE :MIXED-PAGE "Internal class for top-level read-eval-print loop" ((new-instance . rep-cntx.new-instance)) nil ((name . symbol) (rd-fn . T) (rp-fn . T) (ev-fn . T) (ls-fn . T) (pckg . T) (ostm . T)) ((object-id . rep-cntx.object-id) (object-name . rep-cntx.object-name) (print-object . rep-cntx.print-object) (sys-str-top rep-cntx.sys-str-top))))
(000000F9 53 2 30 0 1 32		find-class<-)
(000000FF 10)
(00000100 9 89 0		'rep-cntx-p)
(00000103 26 29 0		rep-cntx-p)
(00000106 9 29 0		'rep-cntx-p)
(00000109 10)
(0000010A 1		nil)
(0000010B 10)
(0000010C 9 88 0		'rep-cntx.new-instance)
(0000010F 26 28 0		rep-cntx.new-instance)
(00000112 9 28 0		'rep-cntx.new-instance)
(00000115 10)
(00000116 9 87 0		'rep-cntx)
(00000119 26 60 0		rep-cntx)
(0000011C 9 60 0		'rep-cntx)
(0000011F 10)
(00000120 1		nil)
(00000121 10)
(00000122 12 86 0		'rep-cntx-by-id)
(00000125 26 27 0		rep-cntx-by-id)
(00000128 9 27 0		'rep-cntx-by-id)
(0000012B 10)
(0000012C 9 85 0		'rep-cntx.object-id)
(0000012F 26 26 0		rep-cntx.object-id)
(00000132 9 26 0		'rep-cntx.object-id)
(00000135 10)
(00000136 9 84 0		'rep-cntx.object-name)
(00000139 26 25 0		rep-cntx.object-name)
(0000013C 9 25 0		'rep-cntx.object-name)
(0000013F 10)
(00000140 9 83 0		'rep-cntx.print-object)
(00000143 26 24 0		rep-cntx.print-object)
(00000146 9 24 0		'rep-cntx.print-object)
(00000149 10)
(0000014A 9 82 0		'rep-cntx.redirect)
(0000014D 26 23 0		rep-cntx.redirect)
(00000150 9 23 0		'rep-cntx.redirect)
(00000153 10)
(00000154 9 81 0		'rep-cntx.find-symbol)
(00000157 26 22 0		rep-cntx.find-symbol)
(0000015A 9 22 0		'rep-cntx.find-symbol)
(0000015D 10)
(0000015E 9 80 0		'rep-cntx.intern)
(00000161 26 21 0		rep-cntx.intern)
(00000164 9 21 0		'rep-cntx.intern)
(00000167 10)
(00000168 9 79 0		'rep-cntx.apropos)
(0000016B 26 20 0		rep-cntx.apropos)
(0000016E 9 20 0		'rep-cntx.apropos)
(00000171 10)
(00000172 1		nil)
(00000173 26 19 0		_%rep-cntx-preserve-stdo%)
(00000176 9 19 0		'_%rep-cntx-preserve-stdo%)
(00000179 10)
(0000017A 12 78 0		'rep-cntx.p-apply)
(0000017D 26 18 0		rep-cntx.p-apply)
(00000180 9 18 0		'rep-cntx.p-apply)
(00000183 10)
(00000184 9 77 0		'rep-cntx.p-funcall)
(00000187 26 17 0		rep-cntx.p-funcall)
(0000018A 9 17 0		'rep-cntx.p-funcall)
(0000018D 10)
(0000018E 9 76 0		'rep-cntx.p-eval)
(00000191 26 16 0		rep-cntx.p-eval)
(00000194 9 16 0		'rep-cntx.p-eval)
(00000197 10)
(00000198 12 75 0		'rep-cntx.apply)
(0000019B 26 15 0		rep-cntx.apply)
(0000019E 9 15 0		'rep-cntx.apply)
(000001A1 10)
(000001A2 9 74 0		'rep-cntx.funcall)
(000001A5 26 14 0		rep-cntx.funcall)
(000001A8 9 14 0		'rep-cntx.funcall)
(000001AB 10)
(000001AC 9 73 0		'rep-cntx.eval)
(000001AF 26 13 0		rep-cntx.eval)
(000001B2 9 13 0		'rep-cntx.eval)
(000001B5 10)
(000001B6 9 72 0		'rep-cntx.read)
(000001B9 26 12 0		rep-cntx.read)
(000001BC 9 12 0		'rep-cntx.read)
(000001BF 10)
(000001C0 12 71 0		'rep-cntx.p-read)
(000001C3 26 11 0		rep-cntx.p-read)
(000001C6 9 11 0		'rep-cntx.p-read)
(000001C9 10)
(000001CA 9 70 0		'rep-cntx.load-stream)
(000001CD 26 10 0		rep-cntx.load-stream)
(000001D0 9 10 0		'rep-cntx.load-stream)
(000001D3 10)
(000001D4 9 69 0		'rep-cntx.p-load-stream)
(000001D7 26 9 0		rep-cntx.p-load-stream)
(000001DA 9 9 0		'rep-cntx.p-load-stream)
(000001DD 10)
(000001DE 12 68 0		'rep-cntx.sys-str-top)
(000001E1 26 8 0		rep-cntx.sys-str-top)
(000001E4 9 8 0		'rep-cntx.sys-str-top)
(000001E7 10)
(000001E8 53 0 7 0 1 32		alesmaint?)
(000001EE 61 12 0		nil->JMP 000001FD)
(000001F1 9 6 0		':NAME)
(000001F4 9 48 0		':LPP)
(000001F7 53 2 60 0 1 32		rep-cntx)
(000001FD 26 5 0		_%lpp-rep-cntx%)
(00000200 9 5 0		'_%lpp-rep-cntx%)
(00000203 10)
(00000204 53 0 7 0 1 32		alesmaint?)
(0000020A 61 12 0		nil->JMP 00000219)
(0000020D 9 6 0		':NAME)
(00000210 9 4 0		':LEX)
(00000213 53 2 60 0 1 32		rep-cntx)
(00000219 26 3 0		_%lex-rep-cntx%)
(0000021C 9 3 0		'_%lex-rep-cntx%)
(0000021F 10)
(00000220 9 6 0		':NAME)
(00000223 9 35 0		':AUTOLISP)
(00000226 53 2 60 0 1 32		rep-cntx)
(0000022C 26 2 0		_%al-rep-cntx%)
(0000022F 9 2 0		'_%al-rep-cntx%)
(00000232 10)
(00000233 3 3 0		_%lex-rep-cntx%)
(00000236 14 3 0		T->JMP 0000023C)
(00000239 3 2 0		_%al-rep-cntx%)
(0000023C 26 1 0		_%sys-rep-cntx%)
(0000023F 9 1 0		'_%sys-rep-cntx%)
(00000242 22		ret)